{"version":3,"sources":["lists/lists.js","App.js","serviceWorker.js","index.js"],"names":["Lists","array","e","arr","filter","v","imdbID","likeList","ls","get","this","filtered","length","push","set","setState","_this","lists","props","react_default","a","createElement","className","undefined","resultList","map","r","key","onClick","searchInfo","handleClick","src","Poster","alt","Title","Year","movieInfo","Awards","BoxOffice","Country","Director","Genre","Plot","Component","API","KEY","MOVIE","INFO","PLOT","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchValue","fetch","target","value","then","response","json","data","Search","handleSubmit","preventDefault","content","state","baseState","inputVal","M","AutoInit","onSubmit","resetForm","type","placeholder","onChange","src_lists_lists","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4fa2382.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ls from 'local-storage'\r\nimport './lists.css';\r\n\r\nclass Lists extends Component {\r\n\r\n  filtered(array, e, arr){\r\n    if(!arr){\r\n      return array.filter( v => {\r\n        return v.imdbID === e.imdbID \r\n      })\r\n    } else {\r\n      return array.filter( v => {\r\n        return v.imdbID !== e.imdbID \r\n      })\r\n    }\r\n  }\r\n\r\n  handleClick(e) {\r\n    let likeList = ls.get('likeList') || [];\r\n\r\n    const fList = this.filtered(likeList, e, false);\r\n\r\n    if(fList.length !== 1){\r\n      likeList.push(e)\r\n      ls.set('likeList', likeList)\r\n      this.setState( likeList )\r\n    } else {\r\n      likeList = this.filtered(likeList, e, true);\r\n      ls.set('likeList', likeList)\r\n      this.setState( likeList )\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    const lists = this.props.lists;\r\n    let likeList = ls.get('likeList') || [];\r\n      return (\r\n          <div className=\"Lists\">\r\n            <h4>Result</h4>\r\n            <ul className=\"collapsible\">\r\n                {\r\n                  (lists.resultList !== undefined ) \r\n                  ? \r\n                  lists.resultList.map(r =>{\r\n                    // @tt return true or false if imdbID is finded on local storage\r\n                    // const tt = likeList.filter( movie => {\r\n                    //   return movie.imdbID !== r.imdbID\r\n                    // }).length\r\n\r\n                    // let favorite = (tt) ? \"favorite\":\"favorite_border\";\r\n    \r\n                    return(\r\n                      <li key={r.imdbID} >\r\n                        <div onClick= { () =>\r\n                        this.props.searchInfo(r.imdbID)\r\n                    }  className=\"movies-list collapsible-header\">\r\n                          <i className=\"material-icons \" onClick={ () =>                 this.handleClick(r)  } >favorite</i>\r\n                          <div><img src={r.Poster} alt=\"poster\"                 className=\"poster\" /></div>\r\n                          <div>{r.Title}</div>\r\n                          <div>{r.Year}</div>\r\n                        </div>\r\n                        <div className=\"collapsible-body\">\r\n                          <div><strong>Awards: </strong>{ lists.movieInfo.Awards }</div>\r\n                          <div><strong>BoxOffice: </strong>{ lists.movieInfo.BoxOffice }</div>\r\n                          <div><strong>Country: </strong>{ lists.movieInfo.Country }</div>\r\n                          <div><strong>Director: </strong>{ lists.movieInfo.Director }</div>\r\n                          <div><strong>Genre: </strong>{ lists.movieInfo.Genre }</div>\r\n                          <div><strong>Plot: </strong>{ lists.movieInfo.Plot }</div>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  }) \r\n                  : \r\n                  likeList.map(r =>{\r\n                    // @tt return true or false if imdbID is finded on local storage\r\n                    // const tt = likeList.filter( movie => {\r\n                    //   return movie.imdbID !== r.imdbID\r\n                    // }).length\r\n\r\n                    // let favorite = (tt) ? \"favorite\":\"favorite_border\";\r\n    \r\n                    return(\r\n                      <li key={r.imdbID} >\r\n                        <div onClick= { () =>\r\n                        this.props.searchInfo(r.imdbID)\r\n                    }  className=\"movies-list collapsible-header\">\r\n                          <i className=\"material-icons \" onClick={ () =>                 this.handleClick(r)  } >favorite</i>\r\n                          <div><img src={r.Poster} alt=\"poster\"                 className=\"poster\" /></div>\r\n                          <div>{r.Title}</div>\r\n                          <div>{r.Year}</div>\r\n                        </div>\r\n                        <div className=\"collapsible-body\">\r\n                          <div><strong>Awards: </strong>{ lists.movieInfo.Awards }</div>\r\n                          <div><strong>BoxOffice: </strong>{ lists.movieInfo.BoxOffice }</div>\r\n                          <div><strong>Country: </strong>{ lists.movieInfo.Country }</div>\r\n                          <div><strong>Director: </strong>{ lists.movieInfo.Director }</div>\r\n                          <div><strong>Genre: </strong>{ lists.movieInfo.Genre }</div>\r\n                          <div><strong>Plot: </strong>{ lists.movieInfo.Plot }</div>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  }) \r\n                }\r\n            </ul>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Lists;\r\n","import React, { Component } from 'react';\nimport ls from 'local-storage'\nimport Lists from './lists/lists'\n// Import Materialize\nimport 'materialize-css/dist/css/materialize.min.css';\nimport M from \"materialize-css\";\n\n\nconst API = 'http://www.omdbapi.com/?';\nconst KEY = '&apikey=4e96eab0';\nconst MOVIE = 's='\nconst INFO = 'i=';\nconst PLOT = '&plot'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      resultList: ls.get('likeList') || [],\n      likeList: ls.get('likeList') || [],\n      movieInfo: \"\"\n    };\n    // preserve the initial state in a new object\n    this.baseState = this.state.inputVal;\n  }\n  searchValue = (e) => {\n    fetch(API + MOVIE + e.target.value + KEY)\n      .then(response => response.json())\n      .then(data => this.setState({ resultList: data.Search }));\n  }\n  searchInfo = (e) => {\n    fetch(API + INFO + e + PLOT + KEY)\n    .then(response => response.json())\n    .then( data => {\n      this.setState({ movieInfo: data })\n      // console.log(data)\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault(); \n    this.setState({\n      content: null\n      })\n  }\n\n  componentDidMount() {\n    // Auto initialize all the things!\n    M.AutoInit();\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit} onClick={this.resetForm} >\n          <input type=\"text\" placeholder=\"Search..\" onChange={this.searchValue}  />\n        </form>\n\n        <Lists lists={this.state} searchInfo={this.searchInfo}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}